(define empty?
  (lambda (lst)(
    if(eq? '() lst) #t #f
  )
  )
)
(define append 
  (lambda(lst1 lst2)
      (   
        if(empty? lst1)
          (
            if(empty? lst2)
              '()
              (cons (car lst2) (append lst1 (cdr lst2)))
          )
          (
            cons (car lst1) (append (cdr lst1) lst2)
          )
      )
  )
)

(define reverse 
  (lambda (lst)
    (
      if(empty? list)
       '()
       (
        append(reverse (cdr lst)) (cons (car lst) '())
       )
       
    )  
  )
)
(define length
  (lambda (lst)
    (if (empty? lst)
        0
        (+ 1 (length (cdr lst))))))

(define dup
  (lambda (element count)
    (if(= count 0)
        '()
        (cons element (dup element (- count 1)))
        )
     )

  )

(define duplicate-helper
  (lambda (lst dup-count)
    (if (empty? lst)
        '()
        (append (dup (car lst) (car dup-count)) (duplicate-helper (cdr lst) (cdr dup-count)))
        )
    )
  )

(define duplicate-items
   (lambda(lst dup-count)
       (let ((lst-length (length lst))
          (dup-length (length dup-count)))
      (if(> lst-length dup-length)
         (duplicate-item lst (append dup-count dup-count))
         (duplicate-helper lst dup-count)
         )
      )
   )
)

(define remove
  (lambda (element lst)
    (if(empty? lst)
       '()
       (if(= element (car lst))
          (remove element (cdr lst))
          (append (cons (car lst) '()) (remove element (cdr lst)))
          )
       )
    )
  )

(define payment
  (lambda (n coins-lst)
    (if (= n 0)
        1
        (if (empty? coins-lst)
            0
          (+ (payment (- n (car coins-lst)) (cdr coins-lst)) (payment n (remove (car coins-lst) (cdr coins-lst))))
        )
    )
  )
)

(define compose
  (lambda(f g)
  (lambda(x)(f(g x)))))

(define compose-n
  (lambda( f n)
        (
     if(= n 1)
       f
       (
        compose f (compose-n f (- n 1)) 
        )
       
     )
  )
)